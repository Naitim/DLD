{
  "stop_state": "24e92215e05614cc6a63963232357746", 
  "event_str": "LongTouchEvent(state=24e92215e05614cc6a63963232357746, view=ea9adb05acca2a35532d495038319a8d, duration=2000)", 
  "tag": "2019-06-11_044150", 
  "event": {
    "event_type": "long_touch", 
    "duration": 2000, 
    "y": null, 
    "x": null, 
    "id": 23, 
    "view": {
      "content_description": null, 
      "resource_id": "com.gh4a:id/readme", 
      "text": "Welcome!\n\nThis repository contains the source code for:\n\n\n  \u2022  Windows Terminal\n  \u2022  The Windows console host (conhost.exe)\n  \u2022  Components shared between the two projects\n  \u2022  ColorTool\n  \u2022  Sample projects that show how to consume the Windows Console APIs\n\nOther related repositories include:\n\n\n  \u2022  Console API Documentation\n\nBuild Status\n\nProjectBuild StatusTerminal\ufffcColorTool\ufffc \n\nTerminal & Console Overview\n\n\nPlease take a few minutes to review the overview below before diving into the code:\n\nWindows Terminal\n\n\nWindows Terminal is a new, modern, feature-rich, productive terminal application for command-line users. It includes many of the features most frequently requested by the Windows command-line community including support for tabs, rich text, globalization, configurability, theming & styling, and more.\n\nThe Terminal will also need to meet our goals and measures to ensure it remains fast, and efficient, and doesn't consume vast amounts of memory or power.\n\nThe Windows console host\n\n\nThe Windows console host, conhost.exe, is Windows' original command-line user experience. It implements Windows' command-line infrastructure, and is responsible for hosting the Windows Console API, input engine, rendering engine, and user preferences. The console host code in this repository is the actual source from which the conhost.exe in Windows itself is built.\n\nConsole's primary goal is to remain backwards-compatible with existing console subsystem applications.\n\nSince assuming ownership of the Windows command-line in 2014, the team has added several new features to the Console, including window transparency, line-based selection, support for ANSI / Virtual Terminal sequences, 24-bit color, a Pseudoconsole (\"ConPTY\"), and more.\n\nHowever, because the Console's primary goal is to maintain backward compatibility, we've been unable to add many of the features the community has been asking for, and which we've been wanting to add for the last several years--like tabs!\n\nThese limitations led us to create the new Windows Terminal.\n\nShared Components\n\n\nWhile overhauling the Console, we've modernized its codebase considerably. We've cleanly separated logical entities into modules and classes, introduced some key extensibility points, replaced several old, home-grown collections and containers with safer, more efficient STL containers, and made the code simpler and safer by using Microsoft's WIL header library.\n\nThis overhaul work resulted in the creation of several key components that would be useful for any terminal implementation on Windows, including a new DirectWrite-based text layout and rendering engine, a text buffer capable of storing both UTF-16 and UTF-8, and a VT parser/emitter.\n\nBuilding a new terminal\n\n\nWhen we started building the new terminal application, we explored and evaluated several approaches and technology stacks. We ultimately decided that our goals would be best met by sticking with C++ and sharing the aforementioned modernized components, placing them atop the modern Windows application platform and UI framework.\n\nFurther, we realized that this would allow us to build the terminal's renderer and input stack as a reusable Windows UI control that others can incorporate into their applications.\n\nFAQ\n\nWhere can I download Windows Terminal?\n\nThere are no binaries to download quite yet.\n\n\nThe Windows Terminal is in the very early alpha stage, and not ready for the general public quite yet. If you want to jump in early, you can try building it yourself from source.\n\nOtherwise, you'll need to wait until Mid-June for an official preview build to drop.\n\nI built and ran the new Terminal, but I just get a blank window app!\n\n\nMake sure your are building for your computer's architecture. If your box has a 64-bit Windows change your Solution Platform to x64.\nTo check your OS architecture go to Settings -> System -> About (or Win+X -> System) and under Device specifications check for the System type\n\nI built and ran the new Terminal, but it looks just like the old console! What gives?\n\n\nFirstly, make sure you're building & deploying CascadiaPackage in Visual Studio, NOT Host.EXE. OpenConsole.exe is just conhost.exe, the same old console you know and love. opencon.cmd will launch openconsole.exe, and unfortunately, openterm.cmd is currently broken.\n\nSecondly, try pressing Ctrl + T. The tabs are hidden when you only have one tab by default. In the future, the UI will be dramatically different, but for now, the defaults are supposed to look like the console defaults.\n\nI tried running WindowsTerminal.exe and it crashes!\n\n\n  \u2022  Don't try to run it unpackaged. Make sure to build & deploy CascadiaPackage from Visual Studio, and run the Windows Terminal (Dev Build) app.\n  \u2022  Make sure you're on the right version of Windows. You'll need to be on Insider's builds, or wait for the 1903 release, as the Windows Terminal REQUIRES features from the latest Windows release.\n\nGetting Started\n\nPrerequisites\n\n\n  \u2022  You must be running Windows 1903 (build >= 10.0.18362.0) or above in order to run Windows Terminal\n\n  \u2022  As of May 2019 this build is only available through Windows Insider Program. You may register and configure Insider Program through your device's system settings.\n\n  \u2022  \nYou must have the 1903 SDK (build 10.0.18362.0) installed\n\n  \u2022  \nYou must have at least VS 2017 installed\n\n  \u2022  \nYou must install the following Workloads via the VS Installer:\n\n    \u2022  Desktop Development with C++ \n      \u2022  If you're running VS2019, you'll also need to install the following Individual Components: \n        \u2022  MSVC v141 - VS 2017 C++ (x86 and x64) build tools\n        \u2022  C++ ATL for v141 build tools (x86 and x64) \n    \u2022  Universal Windows Platform Development \n      \u2022  Also install the following Individual Component: \n        \u2022  C++ (v141) Universal Windows Platform Tools \n  \u2022  \nYou must also enable Developer Mode in the Windows Settings app to locally install and run the Terminal app.\n\nDebugging\n\n\n  \u2022  To debug in VS, right click on CascadiaPackage (from VS Solution Explorer) and go to properties, in the Debug menu, change \"Application process\" and \"Background task process\" to \"Native Only\"\n\nContributing\n\n\nWe are excited to work alongside you, our amazing community, to build and enhance Windows Terminal!\n\nWe ask that before you start work on a feature that you would like to contribute, please file an issue describing your proposed change: We will be happy to work with you to figure out the best approach, provide guidance and mentorship throughout feature development, and help avoid any wasted or duplicate effort.\n\n\n\ud83d\udc49 Remember! Your contributions may be incorporated into future versions of Windows! Because of this, all pull requests will be subject to the same level of scrutiny for quality, coding standards, performance, globalization, accessibility, and compatibility as those of our internal contributors.\n\n\n\u26a0 Note: The Command-Line Team is actively working out of this repository and will be periodically re-structuring the code to make it easier to comprehend, navigate, build, test, and contribute to, so DO expect significant changes to code layout on a regular basis.\n\nDocumentation\n\n\nAll documentation is located in the ./docs folder. If you would like to contribute to the documentation, please submit a pull request.\n\nCommunicating with the Team\n\n\nThe easiest way to communicate with the team is via GitHub issues. Please file new issues, feature requests and suggestions, but DO search for similar open/closed pre-existing issues before you do.\n\nPlease help us keep this repository clean, inclusive, and fun! We will not tolerate any abusive, rude, disrespectful or inappropriate behavior. Read our Code of Conduct for more details.\n\nIf you would like to ask a question that you feel doesn't warrant an issue (yet), please reach out to us via Twitter:\n\n  \u2022  \nRich Turner, Program Manager: @richturn_ms\n\n  \u2022  \nDustin Howett, Engineering Lead: @dhowett\n\n  \u2022  \nMichael Niksa, Senior Developer: @michaelniksa\n\n  \u2022  \nKayla Cinnamon, Program Manager (especially for UX issues): @cinnamon_msft\n\nDeveloper Guidance\n\nBuilding the Code\n\n\nThis repository uses git submodules for some of its dependencies. To make sure submodules are restored or updated, be sure to run the following prior to building:\n\n\ngit\u00a0submodule\u00a0update\u00a0--init\u00a0--recursive\n\n\nOpenConsole.sln may be built from within Visual Studio or from the command-line using MSBuild. To build from the command line:\n\n\n.\\tools\\razzle.cmd\nbcz\n\n\nWe've provided a set of convenience scripts as well as README in the /tools directory to help automate the process of building and running tests.\n\nCoding Guidance\n\n\nPlease review these brief docs below relating to our coding standards etc.\n\n\n\ud83d\udc49 If you find something missing from these docs, feel free to contribute to any of our documentation files anywhere in the repository (or make some new ones!)\n\n\nThis is a work in progress as we learn what we'll need to provide people in order to be effective contributors to our project.\n\n  \u2022  Coding Style\n  \u2022  Code Organization\n  \u2022  Exceptions in our legacy codebase\n  \u2022  Helpful smart pointers and macros for interfacing with Windows in WIL\n\nCode of Conduct\n\n\nThis project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.", 
      "visible": true, 
      "checkable": false, 
      "children": [], 
      "size": "1032*510", 
      "checked": false, 
      "temp_id": 58, 
      "selected": false, 
      "child_count": 0, 
      "content_free_signature": "[class]android.widget.TextView[resource_id]com.gh4a:id/readme", 
      "is_password": false, 
      "parent": 56, 
      "focusable": true, 
      "editable": false, 
      "focused": false, 
      "clickable": true, 
      "class": "android.widget.TextView", 
      "scrollable": false, 
      "package": "com.gh4a", 
      "long_clickable": true, 
      "view_str": "ea9adb05acca2a35532d495038319a8d", 
      "enabled": true, 
      "bounds": [
        [
          24, 
          1266
        ], 
        [
          1056, 
          1776
        ]
      ], 
      "signature": "[class]android.widget.TextView[resource_id]com.gh4a:id/readme[text]None[enabled,,]"
    }
  }, 
  "start_state": "24e92215e05614cc6a63963232357746"
}